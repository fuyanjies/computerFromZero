// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int screen;
    static Array powers;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let screen = 16384;

        let powers = Array.new(16);
        let powers[0] = 1;
        let powers[1] = powers[0] + powers[0];
        let powers[2] = powers[1] + powers[1];
        let powers[3] = powers[2] + powers[2];
        let powers[4] = powers[3] + powers[3];
        let powers[5] = powers[4] + powers[4];
        let powers[6] = powers[5] + powers[5];
        let powers[7] = powers[6] + powers[6];
        let powers[8] = powers[7] + powers[7];
        let powers[9] = powers[8] + powers[8];
        let powers[10] = powers[9] + powers[9];
        let powers[11] = powers[10] + powers[10];
        let powers[12] = powers[11] + powers[11];
        let powers[13] = powers[12] + powers[12];
        let powers[14] = powers[13] + powers[13];
        let powers[15] = powers[14] + powers[14];

        return ;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return ;
    }

    function void clearScreen() {
        var int address;

        let address = 0;

        while (address < 8912) {
            let screen[address] = 0;
            let address = address + 1;
        }

        return ;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, word;

        let address = (y * 32 ) + (x / 16);
        let word = screen[address];

        if (color) {
            let screen[address] = word | powers[x & 15];
        } else {
            let screen[address] = word & ~powers[x & 15]; 
        }

        return ;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, y;

        if (x1 = x2) {
            let a = Math.min(y1, y2);
            let b = Math.max(y1, y2);

            while (~(a > b)) {
                do Screen.drawPixel(x1, a);
                let a = a + 1;
            }

            return ;
        }

        let a = Math.min(x1, x2);
        let b = Math.max(x1, x2);

        while (~(a > b)) {
            let y = y1 + ((y1 - y2) * (a - x1) / (x1 - x2));

            do Screen.drawPixel(a, y);
        
            let a = a + 1;
        }

        return ;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);

            let y1 = y1 + 1;
        }

        return ;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int a, int b, int r) {
        var int x, y;

        let y = b - r;

        while (~(y > (b + r))) {
            let x = Math.sqrt((r * r) - ((y - b) * (y - b)));
            do Screen.drawLine(a + x, y, a - x, y);
            let y = y + 1;
        }

        return ;
    }
}
