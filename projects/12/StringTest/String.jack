// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int size, cap;
    field Array data;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (0 = maxLength) {
            let maxLength = 1;
        }

        let cap = maxLength;
        let size = 0;
        let data = Array.new(cap);

        let data[size] = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do data.dispose();
        do Memory.deAlloc(this);

        return ;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let data[j] = c;

        return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let data[size] = c;
        let size = size + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let size = size - 1;
        let data[size] = 0;

        return ;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int res;
        var int i, c;

        let res = 0;

        let c = data[0];
        if (45 = c) {
            let i = 1;
            let c = data[1];
            while ((i < size) & (47 < c) & (c < 58)) {
                let res = (res * 10) + (c - 48);
                let i = i + 1;
                let c = data[i];
            }
            let res = -res;
        } else {
            let i = 0;
            while ((i < size) & (47 < c) & (c < 58)) {
                let res = (res * 10) + (c - 48);
                let i = i + 1;
                let c = data[i];
            }
        }

        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean flag;
        var int t, i;

        if (0 > val) {
            let flag = true;
        } else {
            let flag = false;
        }

        let t = Math.abs(val);
        let i = 0;

        while (t > 0) {
            let t = t / 10;
            let i = i + 1;
        }

        if (flag) {
            let size = i + 1;
            let data[0] = 45;
        } else {
            let size = i;
            let i = i - 1;
        }

        let val = Math.abs(val);
        while (val > 0) {
            let t = val / 10;
            let data[i] = (val - (t * 10)) + 48;
            let i = i - 1;
            let val = t;
        }

        return ;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
