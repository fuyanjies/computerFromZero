// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int free_list;
    static int base;

    /** Initializes the class. */
    function void init() {
        let free_list = 2048;
        let base = 0;

        let free_list[0] = 14335;
        let free_list[1] = 0;
        let free_list[2] = 0;

        return ;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return base[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let base[address] = value;

        return ;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int chunk, prev, next;
        var int target;

        let chunk = free_list;

        if (0 = chunk) {
            do Output.printString("free_list is zero");
            do Output.println();

            return 0;
        }

        while (~(0 = chunk[2])) {
            let chunk = chunk[2];
        }
        while (~(0 = chunk) & (chunk[0] < (size + 3))) {
            let chunk = chunk[1];
        }

        if (0 = chunk) {
            do Output.printString("cannot find suit");
            do Output.println();

            return 0;
        }

        if (~(3 < (chunk[0] - size - 3))) {
            let target = chunk + 3;
            let prev = chunk[1];
            let next = chunk[2];

            if (0 = prev) {
                let free_list = next;
            } else {
                let prev[2] = next;
            }

            if (~(0 = next)) {
                let next[1] = prev;
            }

            return target;
        } else {
            let target = chunk + chunk[0] - size;

            let chunk[0] = chunk[0] - size - 3;

            let chunk = target - 3;
            let chunk[0] = size - 3;

            return target;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int chunk, next, fr;

        let fr = o - 3;
        let chunk = free_list;

        if (0 = chunk) {
            let free_list = fr;

            return ;
        }

        if (chunk > fr) {
            if ((fr + fr[0]) = chunk) {
                let fr[1] = 0;
                let fr[2] = chunk[2];
                let fr[0] = fr[0] + chunk[0];

                let free_list = fr;

                return ;
            } else {
                let fr[1] = 0;
                let fr[2] = chunk;
                let chunk[1] = fr;

                let free_list = fr;

                return ;
            }
        }

        let next = chunk[2];
        while (~(0 = next) & (fr > next)) {
            let chunk = next;
            let next = chunk[2];
        }

        if ((chunk + chunk[0]) = fr) {
            let chunk[0] = chunk[0] + fr[0];

            return ;
        }

        if (0 = next) {
            let fr[2] = 0;
            let fr[1] = chunk;
            let chunk[2] = fr;

            return ;
        }

        let fr[2] = next;
        let next[1] = fr;
        let fr[1] = chunk;
        let chunk[2] = fr;

        return ;
    }    
}
