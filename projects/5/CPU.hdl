// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    Mux16(a=A, b=inM, sel=instruction[12], out=AM);
    ALU(x=D, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6],
        out=alu, out=outM, zr=zr, ng=ng);
    
    // calculate if need jump
    And(a=ng, b=instruction[2], out=j1);
    And(a=zr, b=instruction[1], out=j2);
    Or(a=ng, b=zr, out=jt1);
    Not(in=jt1, out=jt2);
    And(a=jt2, b=instruction[0], out=j3);
    Or(a=j1, b=j2, out=jt3);
    Or(a=jt3, b=j3, out=j);
    And(a=instruction[15], b=j, out=jmp);

    // calculate dest area
    And(a=instruction[15], b=instruction[5], out=toA);
    And(a=instruction[15], b=instruction[4], out=toD);
    And(a=instruction[15], b=instruction[3], out=toM, out=writeM);

    Nand(a=instruction[15], b=instruction[15], out=a);
    Mux16(a=instruction, b=alu, sel=instruction[15], out=at);
    Or(a=a, b=toA, out=aa);
    ARegister(in=at, load=aa, out=A, out[0..14]=addressM);
    DRegister(in=alu, load=toD, out=D);

    PC(in=A, inc=true, load=jmp, reset=reset, out[0..14]=pc);
}